@main {
    @block {
        @image(uri: "/img/go.png") {}
        @paragraph {
            @bold { Go } (часто также @bold { Golang }) — компилируемый многопоточный
            @link (uri: "/index.oml") { язык программирования }, разработанный внутри компании
            Google. Разработка Go началась в сентябре 2007 года, его непосредственным
            проектированием занимались Роберт Гризмер, Роб Пайк и Кен Томпсон, занимавшиеся до
            этого проектом разработки операционной системы Inferno. Официально язык был представлен
            в ноябре 2009 года. На данный момент поддержка официального компилятора,
            разрабатываемого создателями языка, осуществляется для операционных систем FreeBSD,
            OpenBSD, Linux, macOS, Windows, DragonFly BSD, Plan 9, Solaris, Android.
            Также Go поддерживается набором компиляторов gcc, существует несколько независимых
            реализаций. Ведётся разработка второй версии языка.
        }
    }

    @block {
        @heading(level: "2") { Название }
        @paragraph {
            Название языка, выбранное компанией Google, практически совпадает с названием языка
            программирования Go!, созданного Ф. Джи. МакКейбом и К. Л. Кларком в 2003 году.
            Обсуждение названия ведётся на странице, посвящённой Go.
        }
    }

    @block {
        @heading(level: "2") { Назначение, идеология }

        @paragraph {
            Язык Go разрабатывался как язык программирования для создания высокоэффективных программ,
            работающих на современных распределённых системах и многоядерных процессорах.
            Он может рассматриваться как попытка создать замену языкам
            @link(uri: "/langs/c.oml") {Си} и @link(uri:"/langs/cpp.oml") { C++ }.
            По словам Роба Пайка, @italic { «Go был разработан для решения реальных проблем, возникающих
            при разработке программного обеспечения в Google» }.
        }

        @columns {

            @block {
                @heading(level: "5") {
                    В качестве основных таких проблем он называет:
                }
                @list(style: "unordered") {
                    @paragraph {
                        медленную сборку программ;
                    }
                    @paragraph {
                        неконтролируемые зависимости;
                    }
                    @paragraph {
                        использование разными программистами разных подмножеств языка;
                    }
                    @paragraph {
                        затруднения с пониманием программ, вызванные неудобочитаемостью кода,
                        плохим документированием и так далее;
                    }
                    @paragraph {
                        дублирование разработок;
                    }
                    @paragraph {
                        высокую стоимость обновлений;
                    }
                    @paragraph {
                        несинхронные обновления при дублировании кода;
                    }
                    @paragraph {
                        сложность разработки инструментария;
                    }
                    @paragraph {
                        проблемы межъязыкового взаимодействия.
                    }
                }
            }

            @block {
                @heading(level: "5") {
                    Основными требованиями к языку стали:
                }
                @list(style: "unordered") {
                    @paragraph {
                        Ортогональность. Язык должен предоставлять небольшое число средств, не повторяющих
                         функциональность друг друга.
                    }
                    @paragraph {
                        Простая и регулярная грамматика. Минимум ключевых слов, простая, легко разбираемая
                        грамматическая структура, легко читаемый код.
                    }
                    @paragraph {
                        Простая работа с типами. Типизация должна обеспечивать безопасность, но не
                        превращаться в бюрократию, лишь увеличивающую код. Отказ от иерархии типов, но
                        с сохранением объектно-ориентированных возможностей.
                    }
                    @paragraph {
                        Отсутствие неявных преобразований.
                    }
                    @paragraph {
                        Сборка мусора.
                    }
                    @paragraph {
                        Встроенные средства распараллеливания, простые и эффективные.
                    }
                    @paragraph {
                        Поддержка строк, ассоциативных массивов и коммуникационных каналов.
                    }
                    @paragraph {
                        Чёткое разделение интерфейса и реализации.
                    }
                    @paragraph {
                        Эффективная система пакетов с явным указанием зависимостей, обеспечивающая
                        быструю сборку.
                    }
                }
            }
        }
    }
    @paragraph {
        Go создавался в расчёте на то, что программы на нём будут транслироваться в объектный код
        целевой аппаратной и программной платформы и в дальнейшем исполняться непосредственно, не
        требуя виртуальной машины, поэтому одним из критериев выбора архитектурных решений была
        возможность обеспечить быструю компиляцию в эффективный объектный код и отсутствие
        чрезмерных требований к динамической поддержке. \n

        В результате получился язык, «который не стал прорывом, но тем не менее явился отличным
        инструментом для разработки крупных программных проектов». \n

        Хотя для Go доступен и интерпретатор, практически в нём нет большой потребности, так как
        скорость компиляции достаточно высока для обеспечения интерактивной разработки.
    }

    @block {
        @heading(level: "2") {
            Основные возможности языка
        }
        @paragraph {
            Основные возможности языка Go:
        }
        @list(style: "ordered") {
            @paragraph {
                Go — язык со строгой статической типизацией. Доступен автоматический вывод типов,
                для пользовательских типов — «утиная типизация».
            }
            @paragraph {
                Полноценная поддержка указателей, но без возможности применять к ним
                арифметические операции, в отличие от C/C++/D.
            }
            @paragraph {
                Строковый тип со встроенной поддержкой юникода.
            }
            @paragraph {
                Использование динамических массивов, хеш-таблиц, срезов (слайсов), вариант
                цикла для обхода коллекции.
            }
            @paragraph {
                Средства функционального программирования: неименованные функции, замыкания,
                передача функций в параметрах и возврат функциональных значений.
            }
            @paragraph {
                Автоматическое управление памятью со сборщиком мусора.
            }
            @paragraph {
                Средства объектно-ориентированного программирования, но без поддержки наследования
                реализации (наследуются только интерфейсы). По большому счёту, Go является
                процедурным языком с поддержкой интерфейсов.
            }
            @paragraph {
                Средства параллельного программирования: встроенные в язык потоки (go routines),
                взаимодействие потоков через каналы и другие средства организации многопоточных
                программ.
            }
            @paragraph {
                Достаточно лаконичный и простой синтаксис, основанный на Си, но существенно
                доработанный, с большим количеством синтаксического сахара.
            }
        }
    }
}
